#ifndef INSTRUCTIONS_H
#define INSTRUCTIONS_H

#include <stdint.h>
#include "cpu.h"

// Instruction opcodes
typedef enum {
    ADC, AND, ASL, BCC, BCS, BEQ, BIT, BMI,
    BNE, BPL, BRK, BVC, BVS, CLC, CLD, CLI,
    CLV, CMP, CPX, CPY, DEC, DEX, DEY, EOR,
    INC, INX, INY, JMP, JSR, LDA, LDX, LDY,
    LSR, NOP, ORA, PHA, PHP, PLA, PLP, ROL,
    ROR, RTI, RTS, SBC, SEC, SED, SEI, STA,
    STX, STY, TAX, TAY, TSX, TXA, TXS, TYA,
} instr;


typedef struct {
    const char *instr_name;     // instruction name
    const char *addrm_type;     // Address mode name
    bool pg_cross_cycle;    // Extra cycle on page cross?
    uint8_t opcode;     // opcode byte
    uint8_t cycles;     // Base cycles
    instr instruction;  // Instruction type
    addr_mode addrm;    // Addressing mode enum
}opcode;

// Macro for opcode definition list to condense raw definition
// macro: OP(0x11, ORA, INDIRECT, 5, *)
// raw: /* 0x11 */ {"ORA", "INDIRECT_Y", true, 5, instr::ORA, addr_mode::INDIRECT_Y,}

// general definition for any function name
#define _VFUNC_(name, n) name##n
#define _VFUNC(name, n) _VFUNC_(name, n)
#define VFUNC(func, ...) _VFUNC(func, __NARG__(__VA_ARGS__)) (__VA_ARGS__)
#define OP(...) VFUNC(OP, __VA_ARGS__)

// Invalid opcode
#define OP1(opcode) \
    {opcode, instr:: ins, addr_mode:: addrm, false, 0, "KIL", "----"}

// Standard opcode
#define OP4(opcode) \
    {opcode, instr:: ins, addr_mode:: addrm, false, cycles, #ins, #addrm}

// Opcode with extra cycle across pages
#define OP5(opcode) \
    {opcode, instr:: ins, addr_mode:: addrm, true, cycles, #ins, #addrm}

// Add opcode lookup table
const opcode opCodes[256] = {
    OP(0x00, BRK, IMPLIED_BRK, false, 0),
    OP(0x01, ORA, INDIRECT_X, false, 6),
    OP(0x02),
    OP(0x03),
    OP(0x04),
    OP(0x05, ORA, ZERO_PAGE, false, 3),
    OP(0x06, ASL, ZERO_PAGE, false, 5),
    OP(0x07),
    OP(0x08, PHP, IMPLIED, false, 3),
    OP(0x09, ORA, IMMEDIATE, false, 2),
    OP(0x0a, ASL, ACCUMULATOR, false, 2),
    OP(0x0b),
    OP(0x0c),
    OP(0x0d, ORA, ABSOLUTE, false, 4),
    OP(0x0e, ASL, ABSOLUTE, false, 4),
    OP(0x0f),
    OP(0x10, BPL, RELATIVE, true, 2),
    OP(0x11, ORA, INDIRECT_Y, true, 5),
    OP(0x12),
    OP(0x13),
    OP(0x14),
    OP(0x15, ORA, ZERO_PAGE_X, false, 4),
    OP(0x16, ASL, ZERO_PAGE_X, false, 6),
    OP(0x17),
    OP(0x18, CLC, IMPLIED, false, 2),
    OP(0x19, ORA, ABSOLUTE_Y, true, 4),
    OP(0x1a),
    OP(0x1b),
    OP(0x1c),
    OP(0x1d, ORA, ABSOLUTE_X, true, 4),
    OP(0x1e, ASL, ABSOLUTE_X, false), 7,
    OP(0x1f),
    OP(0x20, JSR, ABSOLUTE, false, 6),
    OP(0x21, AND, INDIRECT_X, false, 6),
    OP(0x22),
    OP(0x23),
    OP(0x24, BIT, ZERO_PAGE, false, 3),
    OP(0x25, AND, ZERO_PAGE, false, 3),
    OP(0x26, ROL, ZERO_PAGE, false, 3),
    OP(0x27),
    OP(0x28, PLP, IMPLIED, false, 4),
    OP(0x29, AND, IMMEDIATE, false, 2),
    OP(0x2a, ROL, ACCUMULATOR, false, 2),
    OP(0x2b),
    OP(0x2c, BIT, ABSOLUTE, false, 4),
    OP(0x2d, AND, ABSOLUTE, false, 4),
    OP(0x2e, ROL, ABSOLUTE, false, 6),
    OP(0x2f),
    OP(0x30, BMI, RELATIVE, true, 2),
    OP(0x31, AND, INDIRECT_Y, true, 5),
    OP(0x32),
    OP(0x33),
    OP(0x34),
    OP(0x35, AND, ZERO_PAGE_X, false, 4),
    OP(0x36, ROL, ZERO_PAGE_X, false, 6),
    OP(0x37),
    OP(0x38, SEC, IMPLIED, false, 2),
    OP(0x39, AND, ABSOLUTE_Y, true, 4),
    OP(0x3a),
    OP(0x3b),
    OP(0x3c),
    OP(0x3d, AND, ABSOLUTE_X, true, 4),
    OP(0x3e, ROL, ABSOLUTE_X, false, 7),
    OP(0x3f),
    OP(0x40, RTI, IMPLIED, false, 6),
    OP(0x41, EOR, INDIRECT_X, false, 6),
    OP(0x42),
    OP(0x43),
    OP(0x44),
    OP(0x45, EOR, ZERO_PAGE, false, 3),
    OP(0x46, LSR, ZERO_PAGE, false, 5),
    OP(0x47),
    OP(0x48, PHA, IMPLIED, false, 3),
    OP(0x49, EOR, IMMEDIATE, false, 2),
    OP(0x4a, LSR, ACCUMULATOR, false, 2),
    OP(0x4b),
    OP(0x4c, JMP, ABSOLUTE, false, 3),
    OP(0x4d, EOR, ABSOLUTE, false, 4),
    OP(0x4e, LSR, ABSOLUTE, false, 6),
    OP(0x4f),
    OP(0x50, BVC, RELATIVE, true, 2),
    OP(0x51, EOR, INDIRECT_Y, true, 5),
    OP(0x52),
    OP(0x53),
    OP(0x54),
    OP(0x55, EOR, ZERO_PAGE_X, false, 4),
    OP(0x56, LSR, ZERO_PAGE_X, false, 6),
    OP(0x57),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
    OP(0x , , , ),
}
#endif